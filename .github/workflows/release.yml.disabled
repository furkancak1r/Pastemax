name: Build and Release with Code Signing

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      
      - name: Cache electron-builder cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-

      # Code signing setup for macOS
      - name: Set up macOS code signing
        if: matrix.os == 'macos-latest' && secrets.MACOS_CERTIFICATE
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          keychain: build.keychain
          keychain-password: ${{ secrets.KEYCHAIN_PWD }}

      # Code signing setup for Windows
      - name: Set up Windows code signing
        if: matrix.os == 'windows-latest' && secrets.WINDOWS_CERTIFICATE
        uses: crazy-max/ghaction-import-pfx@v1
        with:
          pfx-base64: ${{ secrets.WINDOWS_CERTIFICATE }}
          pfx-password: ${{ secrets.WINDOWS_CERTIFICATE_PWD }}

      - name: Build Vite app
        run: npm run build

      # macOS build
      - name: Build macOS app
        if: matrix.os == 'macos-latest'
        run: npm run package:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.MACOS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
          NOTARIZE: ${{ secrets.NOTARIZE || 'false' }}

      # Windows build
      - name: Build Windows app
        if: matrix.os == 'windows-latest'
        run: npm run package:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.WINDOWS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PWD }}

      # Linux build
      - name: Build Linux app
        if: matrix.os == 'ubuntu-latest'
        run: npm run package:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload artifacts for each platform
      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            release-builds/PasteMax-*.dmg
            release-builds/PasteMax-*-arm64-mac.zip
            release-builds/PasteMax-*-arm64.dmg
          if-no-files-found: error

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            release-builds/PasteMax *.exe
            release-builds/PasteMax.*.exe
            release-builds/PasteMaxSetup.*.exe
            release-builds/PasteMax Setup *.exe
          if-no-files-found: error

      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            release-builds/pastemax_*_amd64.deb
            release-builds/*.AppImage
            release-builds/pastemax *.AppImage
            release-builds/pastemax_*.AppImage
            release-builds/pastemax-*.AppImage
          if-no-files-found: error

      # Create GitHub release
      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ matrix.os == 'macos-latest' && 'release-builds/PasteMax-*.dmg' || '' }}
            ${{ matrix.os == 'macos-latest' && 'release-builds/PasteMax-*-mac.zip' || '' }}
            ${{ matrix.os == 'windows-latest' && 'release-builds/PasteMax [0-9]*.exe' || '' }}
            ${{ matrix.os == 'windows-latest' && 'release-builds/PasteMax Setup [0-9]*.exe' || '' }}
            ${{ matrix.os == 'ubuntu-latest' && 'release-builds/pastemax_*_amd64.deb' || '' }}
            ${{ matrix.os == 'ubuntu-latest' && 'release-builds/*.AppImage' || '' }}
          fail_on_unmatched_files: false
          draft: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}